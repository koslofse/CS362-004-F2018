        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 312 returned 100% blocks executed 100%
      312:    8:int compare(const void* a, const void* b) {
      312:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:   10:    return 1;
      310:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       82:   12:    return -1;
      228:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10 returned 100% blocks executed 83%
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
call    0 returned 100%
       10:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      100:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       20:  140:      state->deckCount[i] = 0;
       80:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       60:  143:	  state->deck[i][j] = estate;
       60:  144:	  state->deckCount[i]++;
        -:  145:	}
      160:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      140:  148:	  state->deck[i][j] = copper;
      140:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       20:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       20:  166:      state->handCount[i] = 0;
       20:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 44 returned 100% blocks executed 100%
       44:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       44:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       44:  209:  if (state->deckCount[player] < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       22:  210:    return -1;
       22:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      254:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      210:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      210:  216:    newDeck[newDeckPos] = state->deck[player][card];
      210:  217:    newDeckPos++;
      726:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      516:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      210:  221:    state->deckCount[player]--;
        -:  222:  }
      232:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      210:  224:    state->deck[player][i] = newDeck[i];
      210:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       22:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 67 returned 100% blocks executed 100%
       67:  311:int numHandCards(struct gameState *state) {
       67:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 4 returned 100% blocks executed 100%
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 117 returned 100% blocks executed 100%
      117:  346:int whoseTurn(struct gameState *state) {
      117:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 14 returned 100% blocks executed 100%
       14:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       14:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
       84:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       70:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       14:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       14:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
       10:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        4:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       14:  370:  state->outpostPlayed = 0;
       14:  371:  state->phase = 0;
       14:  372:  state->numActions = 1;
       14:  373:  state->coins = 0;
       14:  374:  state->numBuys = 1;
       14:  375:  state->playedCardCount = 0;
       14:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       84:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       14:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       14:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3 returned 100% blocks executed 82%
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 212 returned 100% blocks executed 100%
      212:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      212:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       23:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 43%
branch  1 taken 57% (fallthrough)
       10:  534:      state->deck[player][i] = state->discard[player][i];
       10:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       13:  538:    state->deckCount[player] = state->discardCount[player];
       13:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       13:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       13:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       13:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       13:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       13:  559:    if (deckCounter == 0)
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
       11:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      199:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      199:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      199:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      199:  576:    state->deckCount[player]--;
      199:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      201:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 32 returned 100% blocks executed 100%
       32:  583:int getCost(int cardNumber)
        -:  584:{
       32:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 9%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 9%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 3%
        -:  586:    {
        1:  587:    case curse:
        1:  588:      return 0;
        3:  589:    case estate:
        3:  590:      return 2;
        1:  591:    case duchy:
        1:  592:      return 5;
        1:  593:    case province:
        1:  594:      return 8;
        3:  595:    case copper:
        3:  596:      return 0;
        1:  597:    case silver:
        1:  598:      return 3;
        1:  599:    case gold:
        1:  600:      return 6;
        1:  601:    case adventurer:
        1:  602:      return 6;
        1:  603:    case council_room:
        1:  604:      return 5;
        1:  605:    case feast:
        1:  606:      return 4;
        1:  607:    case gardens:
        1:  608:      return 4;
        1:  609:    case mine:
        1:  610:      return 5;
        1:  611:    case remodel:
        1:  612:      return 4;
        1:  613:    case smithy:
        1:  614:      return 4;
        1:  615:    case village:
        1:  616:      return 3;
        1:  617:    case baron:
        1:  618:      return 4;
        1:  619:    case great_hall:
        1:  620:      return 3;
        1:  621:    case minion:
        1:  622:      return 5;
        1:  623:    case steward:
        1:  624:      return 3;
        1:  625:    case tribute:
        1:  626:      return 5;
        1:  627:    case ambassador:
        1:  628:      return 3;
        1:  629:    case cutpurse:
        1:  630:      return 4;
        1:  631:    case embargo: 
        1:  632:      return 2;
        1:  633:    case outpost:
        1:  634:      return 5;
        1:  635:    case salvager:
        1:  636:      return 4;
        1:  637:    case sea_hag:
        1:  638:      return 4;
        1:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 28 returned 100% blocks executed 8%
       28:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       28:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       28:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       28:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       28:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       28:  660:  int z = 0;// this is the counter for the temp hand
       28:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        6:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       28:  667:  switch( card ) 
branch  0 taken 29%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 29%
branch  7 taken 29%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 14%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        8:  669:    case adventurer:
        8:  670:        adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
call    0 returned 100%
        -:  671:
        8:  672:      return 0;
        -:  673:			
    #####:  674:    case council_room:
        -:  675:        //+4 Cards
    #####:  676:        councilroom_card(state, currentPlayer, handPos);
call    0 never executed
        -:  677:
    #####:  678:      return 0;
        -:  679:			
    #####:  680:    case feast:
        -:  681:      //gain card with cost up to 5
        -:  682:      //Backup hand
    #####:  683:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  684:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  685:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  686:      }
        -:  687:      //Backup hand
        -:  688:
        -:  689:      //Update Coins for Buy
    #####:  690:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  691:      x = 1;//Condition to loop on
    #####:  692:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  693:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  694:	  if (DEBUG)
        -:  695:	    printf("None of that card left, sorry!\n");
        -:  696:
        -:  697:	  if (DEBUG){
        -:  698:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  699:	  }
        -:  700:	}
    #####:  701:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  702:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  703:
        -:  704:	  if (DEBUG){
        -:  705:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  706:	  }
        -:  707:	}
        -:  708:	else{
        -:  709:
        -:  710:	  if (DEBUG){
        -:  711:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  712:	  }
        -:  713:
    #####:  714:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  715:	  x = 0;//No more buying cards
        -:  716:
        -:  717:	  if (DEBUG){
        -:  718:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  719:	  }
        -:  720:
        -:  721:	}
        -:  722:      }     
        -:  723:
        -:  724:      //Reset Hand
    #####:  725:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  726:	state->hand[currentPlayer][i] = temphand[i];
    #####:  727:	temphand[i] = -1;
        -:  728:      }
        -:  729:      //Reset Hand
        -:  730:      			
    #####:  731:      return 0;
        -:  732:			
    #####:  733:    case gardens:
    #####:  734:      return -1;
        -:  735:			
    #####:  736:    case mine:
    #####:  737:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  738:
    #####:  739:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:		
    #####:  744:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  745:	{
    #####:  746:	  return -1;
        -:  747:	}
        -:  748:
    #####:  749:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  750:	{
    #####:  751:	  return -1;
        -:  752:	}
        -:  753:
    #####:  754:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  755:
        -:  756:      //discard card from hand
    #####:  757:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  758:
        -:  759:      //discard trashed card
    #####:  760:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  761:	{
    #####:  762:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  763:	    {
    #####:  764:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  765:	      break;
        -:  766:	    }
        -:  767:	}
        -:  768:			
    #####:  769:      return 0;
        -:  770:			
    #####:  771:    case remodel:
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        8:  797:    case smithy:
        -:  798:      //+3 Cards
        8:  799:      smithy_card(currentPlayer, state, handPos);
call    0 returned 100%
        -:  800:
        8:  801:      return 0;
        -:  802:		
        8:  803:    case village:
        -:  804:      //+1 Card
        8:  805:         village_card(state, currentPlayer, handPos);
call    0 returned 100%
        -:  806:
        8:  807:      return 0;
        -:  808:		
    #####:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
        -:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  835:		isGameOver(state);
call    0 never executed
        -:  836:	      }
        -:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
        -:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:	    isGameOver(state);
call    0 never executed
        -:  853:	  }
        -:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
    #####:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      greathall_card(state, currentPlayer, handPos);
call    0 never executed
        -:  863:
    #####:  864:      return 0;
        -:  865:		
    #####:  866:    case minion:
        -:  867:      //+1 action
    #####:  868:      state->numActions++;
        -:  869:			
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  872:			
    #####:  873:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  874:	{
    #####:  875:	  state->coins = state->coins + 2;
        -:  876:	}
        -:  877:			
    #####:  878:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  879:	{
        -:  880:	  //discard hand
    #####:  881:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  882:	    {
    #####:  883:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  884:	    }
        -:  885:				
        -:  886:	  //draw 4
    #####:  887:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  890:	    }
        -:  891:				
        -:  892:	  //other players discard hand and redraw if hand size > 4
    #####:  893:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  896:		{
    #####:  897:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  898:		    {
        -:  899:		      //discard hand
    #####:  900:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  903:			}
        -:  904:							
        -:  905:		      //draw 4
    #####:  906:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  907:			{
    #####:  908:			  drawCard(i, state);
call    0 never executed
        -:  909:			}
        -:  910:		    }
        -:  911:		}
        -:  912:	    }
        -:  913:				
        -:  914:	}
    #####:  915:      return 0;
        -:  916:		
    #####:  917:    case steward:
    #####:  918:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  919:	{
        -:  920:	  //+2 cards
    #####:  921:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  922:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  923:	}
    #####:  924:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  925:	{
        -:  926:	  //+2 coins
    #####:  927:	  state->coins = state->coins + 2;
        -:  928:	}
        -:  929:      else
        -:  930:	{
        -:  931:	  //trash 2 cards in hand
    #####:  932:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  933:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  934:	}
        -:  935:			
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  938:      return 0;
        -:  939:		
    #####:  940:    case tribute:
    #####:  941:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  942:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  943:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	  state->deckCount[nextPlayer]--;
        -:  945:	}
    #####:  946:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  947:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  948:	  state->discardCount[nextPlayer]--;
        -:  949:	}
        -:  950:	else{
        -:  951:	  //No Card to Reveal
        -:  952:	  if (DEBUG){
        -:  953:	    printf("No cards to reveal\n");
        -:  954:	  }
        -:  955:	}
        -:  956:      }
        -:  957:	    
        -:  958:      else{
    #####:  959:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  960:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  961:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  962:	    state->deckCount[nextPlayer]++;
    #####:  963:	    state->discard[nextPlayer][i] = -1;
    #####:  964:	    state->discardCount[nextPlayer]--;
        -:  965:	  }
        -:  966:			    
    #####:  967:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  968:	} 
    #####:  969:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  970:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  971:	state->deckCount[nextPlayer]--;
    #####:  972:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  973:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  974:	state->deckCount[nextPlayer]--;
        -:  975:      }    
        -:  976:		       
    #####:  977:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  978:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  979:	state->playedCardCount++;
    #####:  980:	tributeRevealedCards[1] = -1;
        -:  981:      }
        -:  982:
    #####:  983:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  984:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  985:	  state->coins += 2;
        -:  986:	}
        -:  987:		    
    #####:  988:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  989:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  990:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  991:	}
        -:  992:	else{//Action Card
    #####:  993:	  state->numActions = state->numActions + 2;
        -:  994:	}
        -:  995:      }
        -:  996:	    
    #####:  997:      return 0;
        -:  998:		
    #####:  999:    case ambassador:
    #####: 1000:      j = 0;		//used to check if player has enough cards to discard
        -: 1001:
    #####: 1002:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1003:	{
    #####: 1004:	  return -1;				
        -: 1005:	}
        -: 1006:
    #####: 1007:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  return -1;
        -: 1010:	}
        -: 1011:
    #####: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1015:	    {
    #####: 1016:	      j++;
        -: 1017:	    }
        -: 1018:	}
    #####: 1019:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  return -1;				
        -: 1022:	}
        -: 1023:
        -: 1024:      if (DEBUG) 
        -: 1025:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1026:
        -: 1027:      //increase supply count for choosen card by amount being discarded
    #####: 1028:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1029:			
        -: 1030:      //each other player gains a copy of revealed card
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1036:	    }
        -: 1037:	}
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1041:
        -: 1042:      //trash copies of cards returned to supply
    #####: 1043:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1044:	{
    #####: 1045:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1048:		{
    #####: 1049:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1050:		  break;
        -: 1051:		}
        -: 1052:	    }
        -: 1053:	}			
        -: 1054:
    #####: 1055:      return 0;
        -: 1056:		
    #####: 1057:    case cutpurse:
        -: 1058:
    #####: 1059:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1060:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
    #####: 1062:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1063:	    {
    #####: 1064:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:		{
    #####: 1066:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1069:		      break;
        -: 1070:		    }
    #####: 1071:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1072:		    {
    #####: 1073:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1074:			{
        -: 1075:			  if (DEBUG)
        -: 1076:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1077:			}	
    #####: 1078:		      break;
        -: 1079:		    }		
        -: 1080:		}
        -: 1081:					
        -: 1082:	    }
        -: 1083:				
        -: 1084:	}				
        -: 1085:
        -: 1086:      //discard played card from hand
    #####: 1087:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1088:
    #####: 1089:      return 0;
        -: 1090:
        -: 1091:		
    #####: 1092:    case embargo: 
        -: 1093:      //+2 Coins
    #####: 1094:      state->coins = state->coins + 2;
        -: 1095:			
        -: 1096:      //see if selected pile is in play
    #####: 1097:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  return -1;
        -: 1100:	}
        -: 1101:			
        -: 1102:      //add embargo token to selected supply pile
    #####: 1103:      state->embargoTokens[choice1]++;
        -: 1104:			
        -: 1105:      //trash card
    #####: 1106:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1107:      return 0;
        -: 1108:		
    #####: 1109:    case outpost:
        -: 1110:      //set outpost flag
    #####: 1111:      state->outpostPlayed++;
        -: 1112:			
        -: 1113:      //discard card
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1115:      return 0;
        -: 1116:		
        4: 1117:    case salvager:
        -: 1118:      //+1 buy
        4: 1119:      state->numBuys++;
        -: 1120:			
        4: 1121:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1122:	{
        -: 1123:	  //gain coins equal to trashed card
        4: 1124:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1125:	  //trash card
        4: 1126:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1127:	}
        -: 1128:			
        -: 1129:      //discard card
        4: 1130:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4: 1131:      return 0;
        -: 1132:		
    #####: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1139:	}
        -: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
    #####: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
        -: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
        -: 1175:}
        -: 1176:
function discardCard called 17 returned 100% blocks executed 78%
       17: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:  //if card is not trashed, added to Played pile 
       17: 1181:  if (trashFlag < 1)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1182:    {
        -: 1183:      //add card to played pile
       12: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       12: 1185:      state->playedCardCount++;
        -: 1186:    }
        -: 1187:	
        -: 1188:  //set played card to -1
       17: 1189:  state->hand[currentPlayer][handPos] = -1;
        -: 1190:	
        -: 1191:  //remove card from player's hand
       17: 1192:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1193:    {
        -: 1194:      //reduce number of cards in hand
    #####: 1195:      state->handCount[currentPlayer]--;
        -: 1196:    }
       17: 1197:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1198:    {
        -: 1199:      //reduce number of cards in hand
    #####: 1200:      state->handCount[currentPlayer]--;
        -: 1201:    }
        -: 1202:  else 	
        -: 1203:    {
        -: 1204:      //replace discarded card with last card in hand
       17: 1205:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1206:      //set last card to -1
       17: 1207:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1208:      //reduce number of cards in hand
       17: 1209:      state->handCount[currentPlayer]--;
        -: 1210:    }
        -: 1211:	
       17: 1212:  return 0;
        -: 1213:}
        -: 1214:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1215:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1216:{
        -: 1217:  //Note: supplyPos is enum of choosen card
        -: 1218:	
        -: 1219:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1220:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1221:    {
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:	
        -: 1225:  //added card for [whoseTurn] current player:
        -: 1226:  // toFlag = 0 : add to discard
        -: 1227:  // toFlag = 1 : add to deck
        -: 1228:  // toFlag = 2 : add to hand
        -: 1229:
    #####: 1230:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1231:    {
    #####: 1232:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1233:      state->deckCount[player]++;
        -: 1234:    }
    #####: 1235:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1236:    {
    #####: 1237:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1238:      state->handCount[player]++;
        -: 1239:    }
        -: 1240:  else
        -: 1241:    {
    #####: 1242:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1243:      state->discardCount[player]++;
        -: 1244:    }
        -: 1245:	
        -: 1246:  //decrease number in supply pile
    #####: 1247:  state->supplyCount[supplyPos]--;
        -: 1248:	 
    #####: 1249:  return 0;
        -: 1250:}
        -: 1251:
function updateCoins called 24 returned 100% blocks executed 82%
       24: 1252:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1253:{
        -: 1254:  int i;
        -: 1255:	
        -: 1256:  //reset coin count
       24: 1257:  state->coins = 0;
        -: 1258:
        -: 1259:  //add coins for each Treasure card in player's hand
      144: 1260:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1261:    {
      120: 1262:      if (state->hand[player][i] == copper)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 1263:	{
       82: 1264:	  state->coins += 1;
        -: 1265:	}
       38: 1266:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1267:	{
    #####: 1268:	  state->coins += 2;
        -: 1269:	}
       38: 1270:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1271:	{
    #####: 1272:	  state->coins += 3;
        -: 1273:	}	
        -: 1274:    }	
        -: 1275:
        -: 1276:  //add bonus
       24: 1277:  state->coins += bonus;
        -: 1278:
       24: 1279:  return 0;
        -: 1280:}
        -: 1281:
        -: 1282:
        -: 1283://Increase player's handsize by drawing 3 cards
function smithy_card called 8 returned 100% blocks executed 100%
        8: 1284:int smithy_card(int currentplayer, struct gameState *state, int handPos){
        -: 1285:  int i;
        -: 1286:
       40: 1287:  for(i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       32: 1288:    drawCard(currentplayer, state);
call    0 returned 100%
        -: 1289:  }
        -: 1290:
        8: 1291:  discardCard(handPos, currentplayer, state, 0);
call    0 returned 100%
        -: 1292:
        8: 1293:  return 0;
        -: 1294:}
        -: 1295:
        -: 1296:
        -: 1297://Reveals cards from the player's deck unti 2 Treasure cards are found.
function adventurer_card called 8 returned 100% blocks executed 100%
        8: 1298:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[MAX_HAND]){
        8: 1299:    int z = 0;
        -: 1300:
       65: 1301:    while(drawntreasure<2){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       49: 1302:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       11: 1303:            shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1304:        }
        -: 1305:
       49: 1306:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1307:
       49: 1308:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1309:
       49: 1310:        if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
       16: 1311:            drawntreasure++;
        -: 1312:        else{
       33: 1313:            temphand[z]=cardDrawn;
       33: 1314:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       33: 1315:            z++;
        -: 1316:        }
        -: 1317:    }
       49: 1318:    while(z-1>=0){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       33: 1319:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       33: 1320:        z=z-1;
        -: 1321:    }
        8: 1322:}
        -: 1323:
        -: 1324:
        -: 1325:
        -: 1326:
        -: 1327://Each other player will draw a card
function councilroom_card called 0 returned 0% blocks executed 0%
    #####: 1328:void councilroom_card(struct gameState *state, int currentPlayer,  int handPos){
        -: 1329:    int i;
        -: 1330:
    #####: 1331:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1332:    {
    #####: 1333:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1334:    }
        -: 1335:
        -: 1336:    //+1 Buy
    #####: 1337:    state->numBuys++;
        -: 1338:
        -: 1339:    //Each other player draws a card
    #####: 1340:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1341:    {
    #####: 1342:        drawCard(i, state);
call    0 never executed
        -: 1343:    }
        -: 1344:
        -: 1345:    //put played card in played card pile
    #####: 1346:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1347:}
        -: 1348:
        -: 1349:
        -: 1350:
        -: 1351://Gives the player 1 card and 2 actions
function village_card called 8 returned 100% blocks executed 100%
        8: 1352:void village_card(struct gameState *state, int currentPlayer,  int handPos){
        8: 1353:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1354:
        -: 1355:    //+2 Actions
        8: 1356:    state->numActions = state->numActions + 2;
        -: 1357:
        -: 1358:    //discard played card from hand
        -: 1359://    discardCard(handPos, currentPlayer, state, 0);
        8: 1360:}
        -: 1361:
        -: 1362:
        -: 1363:
        -: 1364://Gives the player 1 card and 1 action
function greathall_card called 0 returned 0% blocks executed 0%
    #####: 1365:void greathall_card(struct gameState *state, int currentPlayer,  int handPos){
    #####: 1366:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1367:
        -: 1368:    //+1 Actions
    #####: 1369:    state->numActions++;
        -: 1370:
        -: 1371:    //discard card from hand
    #####: 1372:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1373:}
        -: 1374:
        -: 1375:
        -: 1376:
        -: 1377:
        -: 1378:
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
